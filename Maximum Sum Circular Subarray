seee your approach is also good but below approach is just pure class 

https://leetcode.com/problems/maximum-sum-circular-subarray/solutions/3070326/most-detailed-explanation-easy-to-understand-c/?page=3

see to calculate the wrap subrarray sum just calculate the minimum sum and subtract from total and this can be one of the possible answer ..

https://leetcode.com/problems/maximum-sum-circular-subarray/solutions/3067403/beats-100-explanation-with-images-and-video-java-o-n-kadane-s-algorithm/
see above link for the wrapped subarray sum we subtracted min sum which was -2+-1+-3


//your code

int maxSubarraySumCircular(vector<int>& nums)
    {
                int maxi=INT_MIN,mini=INT_MAX,sum1=0,sum2=0,totalsum=0;
                int i,n=nums.size();
                for(i=0;i<n;i++)
                {
                     sum1+=nums[i];
                     sum2+=nums[i];
                     maxi=max(maxi,sum1);
                     mini=min(mini,sum2);
                     totalsum+=nums[i];
                     if(sum1<=0)
                     sum1=0;
                     if(sum2>=0)
                     sum2=0;
                } 
                if(totalsum-mini==0)
                return maxi;
                return max(maxi,totalsum-mini);
    }
