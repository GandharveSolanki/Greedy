our approach is first sort the array by start time then apply the Meeting rooms logic.

//code 

    int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
    	int i;
    	vector<pair<int,int>> v;
    	priority_queue<int,vector<int>,greater<int>> p;
    	for( i=0;i<n;i++)
    	{
    	    v.push_back({arr[i],dep[i]});
    	}
    	sort(v.begin(),v.end());
    	p.push(v[0].second);
    	for(i=1;i<n;i++)
    	{
    	    if(p.top()<v[i].first)
    	    {
    	        p.pop();
    	        p.push(v[i].second);
    	    }
    	    else
    	    {
    	        p.push(v[i].second);
    	    }
    	}
    	return p.size();
    }
    
    
    //another approach you sort start time and end time in ascending order then you must wonder the start time corresponding to the end time will be gone but this approach
    is diff this will work after sorting them 
    now i will explain
    first befoe coming to this solution watch anuj bhaiya video that will make your concept more clear its just a 9 min video
    .
    
    otherwise refer below..
