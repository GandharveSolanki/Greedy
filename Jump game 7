
//the below code which you made is actually O(n^2) consider the case when min jump=1 and maxjump = arrlenght and eg like this s="000000000001"
so for one index you will visit all the states ahead of it
so this is O(n^2)...
int rec(string& s,int& minj,int& maxj,int& n,int i,vector<int>& dp)
{
    if(i == n-1)
        return true;
    if(dp[i]!=-1)return dp[i];
    
    int flag = 0;
    for(int j=i+minj;j<=min(i+maxj,n-1);j++)
    {
        if(s[j]=='0')
        {
            if(dp[j]==-1)
            {
                if(rec(s,minj,maxj,n,j,dp))
                {
                    flag = 1;
                    break;
                }
            }
            else if(dp[j])
            {
                flag = 1;
                break;
            }
        }
    }
    return dp[i] = flag;
}
    bool canReach(string s, int minJump, int maxJump)
    {
          int n=s.size();
          vector<int> dp(n,-1);
          return rec(s,minJump,maxJump,n,0,dp);      
    }
    
    // optimisation reaching n^2 solution see the main goal is to the reach the end of the array that is to reach the last index so lets just say from 0 you can
    reach 4 and 5,6,7 so obv from 1st index you will be able to reach 5,6,7,8 but we dont want to again go to 5,6,7 i already know i can reach these states why should 
    i go to these states again so to counter this i will maintain a variable farthest which will tell me how far have we reach now ... and then we apply standard 
    bfs using queue like first 0 index goes into the queue then we traverse its neighbours etc and so on..
    
    //your own code
        bool canReach(string s, int minJump, int maxJump)
    {
         int n=s.size();
          queue<int> q;
          q.push(0);
          int farthest=0;
          if(s[n-1]=='1')
          return false;
         while(!q.empty())
         {
             int pos=q.front();
             q.pop();
             if(pos==n-1)
             return true;
             if(s[pos]=='0')
             {
                     for(int j=max(farthest+1,pos+minJump);j<min(n,pos+maxJump+1);j++)
                     {
                         q.push(j);
                         farthest=j;
                     }
             }
         }
         return false;
    }

//using sliding window + dp

see Explanation
dp[i] = true if we can reach s[i].
Here comes the explanation!

It's a bottom-up DP implementation. The boolean value represents whether this position is reachable from start. So the first step is to generate the table.
Here the table was pre-labeled True or False, thus '1's are already labeled False.
To determine the state of dp[i], one need to check the states in window dp[i-maxJ : i-minJ], because any one of them can reach i if it's labeled True.
Then you need to check if there is a True in this window. Notice that this is a sliding window problem, so you don't need to calculate it everytime.
You only need to remove the effect from dp[i-maxJ-1] and add the dp[i-minJ]. This is done by these two lines of code pre += dp[i - minJ] and pre -= dp[i - maxJ - 1]
The if statements if i >= minJ: and if i > maxJ: are dealing with the initial boundary.

now after reading above you get some slight idea as to what we are trying to implement..
now  see simple concept i will create a dp array where dp[i] will denote if i can reach this index from the start or not so for that lets just say i am at index
7 minJump=2, maxJump=4 so i will check if i am able to reach any index from 5 to 3 right cause 7-minJump=5 7-maxJump=3  so if i am able to reach any index from 
3 to 5 then i can definately reach index 7 lets just say if i want to know if i can reach index n-1 then i will check if i can reach any index from n-1-minJump,n-1-maxJump
then i can  definately reach this index n-1;

your own code

 bool canReach(string s, int minJump, int maxJump)
    {
         int n=s.size(),i,sum=0;
         vector<int> dp(n,0);
         dp[0]=1;
         for(i=minJump;i<n;i++)
         {
             sum+=dp[i-minJump];
             if(i-maxJump-1>=0)
             sum-=dp[i-maxJump-1];
             if(s[i]=='1')
             continue;
             if(sum)
             dp[i]=1;
         }
         return dp[n-1];
    }

