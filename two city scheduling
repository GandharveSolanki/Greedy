see here if you try to sort by cost of city A or B it wont work you can try it this type of sorting will work for some cases 

here the idea is to use relative cost what that means is find the profit you get from going to city A rather than city B in all the intervals then sort this profits 
by the greatest pick the top n/2  and add cost[i][0] for city A and rest n/2 for city B cost[i][1] 

now see i have explained the idea in short if any doubt watch code with alisha's video and try to think yourself..

bool comparator(vector<int>&x,vector<int>&y)
{
    return (x[0]-x[1])<(y[0]-y[1]);
}
class Solution {
public:

    int twoCitySchedCost(vector<vector<int>>& costs) 
    {
        sort(costs.begin(),costs.end(),comparator);
        int i,n=costs.size();
        int cost=0;
        for(i=0;i<n;i++)
        {
               if(i<n/2)
               cost+=costs[i][0];
               else
               cost+=costs[i][1];
        }
        return cost;
    }
