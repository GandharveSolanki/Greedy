see the approach is sort by start time then you will know which meeting comes after the other then i have to tell the minimum rooms such that i can accomodate all the 
meetings for this i use a min heap the first meeting will require a room so i push in queue then second meeting comes i will check in my queue if any meeting is about 
to get over as i have a min heap in which i store the end time so on the meeting with less end time will be there i will check if my current meeting which is abou to start
has greater start time than this meeting end time if thats the case i can accomodate my meeting in the same room ... else i will create a sperate room that is i will 
push this meetings end time in heap ..

///code 

nt Solution::solve(vector<vector<int> > &nums)
 {
      sort(nums.begin(),nums.end());
     int i,n=nums.size();
     priority_queue<int,vector<int>, greater<int> >pq;
     pq.push(nums[0][1]);
     for(int i=1;i<n;i++)
     {
         if(nums[i][0]>=pq.top())
         {
             pq.pop();
             pq.push(nums[i][1]);
         }
         else
         {
                   pq.push(nums[i][1]);
         }
     }
     return pq.size();
}


//another method to understand its explanation see minimum platform question..
int Solution::solve(vector<vector<int> > &nums)
 {
     vector<int> start,end;
     int i,n=nums.size(),j;
     for(i=0;i<n;i++)
     {
         start.push_back(nums[i][0]);
         end.push_back(nums[i][1]);
     }
     sort(start.begin(),start.end());
     sort(end.begin(),end.end());
     int ans=1;
     int roomsreq=1;
     i=1,j=0;
     while(i<n&&j<n)
     {
         if(start[i]<end[j])
         {
             roomsreq++;
             i++;
         }
         else
         {
             roomsreq--;
             j++;
         }
         ans=max(ans,roomsreq);
     }
     return ans;
}


